// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tweet {
  id        String   @id @default(uuid())
  userId    String
  content   String
  imageUrl  String?
  imageId   String?
  createdAt DateTime @default(now())

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  image         Image?         @relation(name: "TweetImage", fields: [imageId], references: [id])
  notifications Notification[]

  @@unique([createdAt, id])
  @@index([userId])
  @@index([imageId])
}

model Like {
  userId  String
  tweetId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)

  @@id([userId, tweetId])
  @@index([userId])
  @@index([tweetId])
}

model Notification {
  id         String   @id @default(cuid())
  tweetId    String
  tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  notifiedId String
  notified   User     @relation(name: "NotifiedNotification", fields: [notifiedId], references: [id], onDelete: Cascade)
  notifierId String
  notifier   User     @relation(name: "NotifierNotification", fields: [notifierId], references: [id], onDelete: Cascade)
  type       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([tweetId])
  @@index([notifiedId])
  @@index([notifierId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  bio           String    @default("")
  backgroundId  String?

  accounts   Account[]
  sessions   Session[]
  tweets     Tweet[]
  likes      Like[]
  background Image?    @relation(name: "ProfileBackground", fields: [backgroundId], references: [id])

  followers User[] @relation(name: "Followers")
  follows   User[] @relation(name: "Followers")

  notified Notification[] @relation(name: "NotifiedNotification")
  notifier Notification[] @relation(name: "NotifierNotification")

  @@index([backgroundId])
}

model Image {
  id        String  @id @default(cuid())
  width     Int
  height    Int
  alt       String  @default("No alternative text provided")
  secureUrl String
  user      User[]  @relation(name: "ProfileBackground")
  Tweet     Tweet[] @relation(name: "TweetImage")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
